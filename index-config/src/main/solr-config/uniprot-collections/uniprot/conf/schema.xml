<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="uniprot" version="1.6">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         version="x.y" is Solr's version number for the schema syntax and
         semantics.  It should not normally be changed by applications.

         1.0: multiValued attribute did not exist, all fields are multiValued
              by nature
         1.1: multiValued attribute introduced, false by default
         1.2: omitTermFreqAndPositions attribute introduced, true by default
              except for text fields.
         1.3: removed optional field compress feature
         1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
              behavior when a single string produces multiple tokens.  Defaults
              to off for version >= 1.4
         1.5: omitNorms defaults to true for primitive field types
              (int, float, boolean, string...)
       -->


    <!-- Valid attributes for fields:
      name: mandatory - the name for the field
      type: mandatory - the name of a field type from the
        <types> fieldType section
      indexed: true if this field should be indexed (searchable or sortable)
      stored: true if this field should be retrievable
      docValues: true if this field should have doc values. Doc values are
        useful for faceting, grouping, sorting and function queries. Although not
        required, doc values will make the index faster to load, more
        NRT-friendly and more memory-efficient. They however come with some
        limitations: they are currently only supported by StrField, UUIDField
        and all Trie*Fields, and depending on the field type, they might
        require the field to be single-valued, be required or have a default
        value (check the documentation of the field type you're interested in
        for more information)
      multiValued: true if this field may contain multiple values per document
      omitNorms: (expert) set to true to omit the norms associated with
        this field (this disables length normalization and index-time
        boosting for the field, and saves some memory).  Only full-text
        fields or fields that need an index-time boost need norms.
        Norms are omitted for primitive (non-analyzed) types by default.
      termVectors: [false] set to true to store the term vector for a
        given field.
        When using MoreLikeThis, fields used for similarity should be
        stored for best performance.
      termPositions: Store position information with the term vector.
        This will increase storage costs.
      termOffsets: Store offset information with the term vector. This
        will increase storage costs.
      required: The field is required.  It will throw an error if the
        value does not exist
      default: a value that should be used if no value is specified
        when adding a document.
    -->

    <!-- field names should consist of alphanumeric or underscore characters only and
       not start with a digit.  This is not currently strictly enforced,
       but other field names will not have first class support from all components
       and back compatibility is not guaranteed.  Names with both leading and
       trailing underscores (e.g. _version_) are reserved.
    -->

    <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
       or Solr won't start. _version_ and update log are required for SolrCloud
    -->
    <field name="_version_" type="plong" indexed="true" stored="true"/>

    <!-- points to the root document of a block of nested documents. Required for nested
       document support, may be removed otherwise
    -->
    <field name="_root_" type="string" indexed="true" stored="false"/>

    <!-- Dynamic field definitions allow using convention over configuration
        for fields via the specification of patterns to match field names.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.  -->

    <dynamicField name="*_i"  type="pint"    indexed="true"  stored="true"/>
    <dynamicField name="*_is" type="pint"    indexed="true"  stored="true"  multiValued="true"/>
    <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
    <dynamicField name="*_s_ns"  type="string"  indexed="true"  stored="false" />
    <dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_l"  type="plong"   indexed="true"  stored="true"/>
    <dynamicField name="*_l_ns"  type="plong"   indexed="true"  stored="false"/>
    <dynamicField name="*_ls" type="plong"   indexed="true"  stored="true"  multiValued="true"/>
    <dynamicField name="*_t"  type="text_general"    indexed="true"  stored="true"/>
    <dynamicField name="*_txt" type="text_general"   indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_en"  type="text_en"    indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="*_b"  type="boolean" indexed="true" stored="true"/>
    <dynamicField name="*_bs" type="boolean" indexed="true" stored="true"  multiValued="true"/>
    <dynamicField name="*_f"  type="pfloat"  indexed="true"  stored="true"/>
    <dynamicField name="*_fs" type="pfloat"  indexed="true"  stored="true"  multiValued="true"/>
    <dynamicField name="*_d"  type="pdouble" indexed="true"  stored="true"/>
    <dynamicField name="*_ds" type="pdouble" indexed="true"  stored="true"  multiValued="true"/>

    <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
    <dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>

    <dynamicField name="random_*" type="random" />


    <!-- uncomment the following to ignore any fields that don't already match an existing
         field name or dynamic field, rather than reporting them as an error.
         alternately, change the type="ignored" to some other type e.g. "text" if you want
         unknown fields indexed and/or stored by default -->
    <!--dynamicField name="*" type="ignored" multiValued="true" /-->

    <!-- Field to use to determine and enforce document uniqueness.
         Unless this field is marked with required="false", it will be a required field
      -->
    <uniqueKey>accession_id</uniqueKey>

    <!-- copyField commands copy one field to another at the time a document
          is added to the index.  It's used either to index the same field differently,
          or to add multiple fields to the same field for easier/faster searching.  -->

    <!--
     <copyField source="title" dest="text"/>
     <copyField source="body" dest="text"/>
    -->

    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	     This includes "string","boolean", and, as of 3.5 (and 4.x),
	     int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
    <fieldType name="int" class="solr.IntPointField" docValues="true"/>
    <fieldType name="float" class="solr.FloatPointField" docValues="true"/>
    <fieldType name="long" class="solr.LongPointField" docValues="true"/>
    <fieldType name="double" class="solr.DoublePointField" docValues="true"/>

    <fieldType name="pint" class="solr.IntPointField" docValues="true"/>
    <fieldType name="pfloat" class="solr.FloatPointField" docValues="true"/>
    <fieldType name="plong" class="solr.LongPointField" docValues="true"/>
    <fieldType name="pdouble" class="solr.DoublePointField" docValues="true"/>

    <fieldType name="pints" class="solr.IntPointField" docValues="true" multiValued="true"/>
    <fieldType name="pfloats" class="solr.FloatPointField" docValues="true" multiValued="true"/>
    <fieldType name="plongs" class="solr.LongPointField" docValues="true" multiValued="true"/>
    <fieldType name="pdoubles" class="solr.DoublePointField" docValues="true" multiValued="true"/>

    <fieldType name="pdate" class="solr.DatePointField" docValues="true"/>
    <fieldType name="pdates" class="solr.DatePointField" docValues="true" multiValued="true"/>
    <fieldType name="date" class="solr.DatePointField" docValues="true"/>
    <fieldType name="rdates" class="solr.DateRangeField" multiValued="true"/>

    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>


    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases.  At query time only, it
	 also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymGraphFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.FlattenGraphFilterFactory"/>
            -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymGraphFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.FlattenGraphFilterFactory"/>
            -->
            <!-- Case insensitive stop word removal.
            -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
                  <filter class="solr.EnglishMinimalStemFilterFactory"/>
            -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
                  <filter class="solr.EnglishMinimalStemFilterFactory"/>
            -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Just like text_general except it reverses the characters of
	 each token, to enable more efficient leading wildcard queries. -->
    <!-- A text field with defaults appropriate for English, plus
       aggressive word-splitting and autophrase features enabled.
       This field is just like text_en, except it adds
       WordDelimiterGraphFilter to enable splitting and matching of
       words on case-change, alpha numeric boundaries, and
       non-alphanumeric chars.  This means certain compound word
       cases will work, for example query "wi fi" will match
       document "WiFi" or "wi-fi".
            -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymGraphFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
            -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
            <filter class="solr.FlattenGraphFilterFactory" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
            />
            <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.EnglishMinimalStemFilterFactory"/>
            <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
                 possible with WordDelimiterGraphFilter in conjuncton with stemming. -->
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            <filter class="solr.FlattenGraphFilterFactory" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.EnglishMinimalStemFilterFactory"/>
            <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
                 possible with WordDelimiterGraphFilter in conjuncton with stemming. -->
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Just like text_general except it reverses the characters of
   each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
                    maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>

    <!--
       Example of using PathHierarchyTokenizerFactory at index time, so
       queries for paths match documents at that path, or in descendent paths
     -->
    <fieldType name="descendent_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory" />
        </analyzer>
    </fieldType>
    <!--
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType name="ancestor_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
        </analyzer>
    </fieldType>

    <!-- ====================================================================================== -->
    <!-- =============================== UniProt configurations =============================== -->
    <!-- ====================================================================================== -->

    <!-- points to the root document of a block of nested documents. Required for nested
          document support, may be removed otherwise
       -->

    <!--The Uniprot Accession, used as ID, defined in uniqueKey -->

    <field name="accession_id" type="string" indexed="true" stored="true" required="true" multiValued="false" docValues="true"/>
    
    <field name="avro_bin" type="string" indexed="false" stored="true" required="false" multiValued="false" docValues="true"/>

    <field name="inactive_reason" type="string" indexed="false" stored="true" required="false" multiValued="false"/>

    <field name="mnemonic" type="basic_ci" indexed="true" stored="true" required="false" multiValued="false"/>
    <field name="mnemonic_sort" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true"/>
    <field name="mnemonic_default" type="full_ci" indexed="true" stored="false" required="false" multiValued="false"/>
    <copyField source="mnemonic" dest="mnemonic_sort"/>

    <field name="active" type="boolean" indexed="true" stored="true" required="false" multiValued="false"/>

    <field name="is_isoform" type="boolean" indexed="true" stored="false" required="false" multiValued="false"/>
    <field name="reviewed" type="boolean" indexed="true" stored="false" required="false" multiValued="false"/>
    <field name="modified" type="date" indexed="true" stored="false" required="false"/>
    <field name="created" type="date" indexed="true" stored="false" required="false"/>
    <field name="sequence_modified" type="date" indexed="true" stored="false" required="false"/>
    
    <field name="source" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    
    <!-- Protein name section -->
    <field name="name" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="name_sort" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true"/>

    <field name="fragment" type="boolean" indexed="true" stored="false" required="false" multiValued="false"/>
    <field name="precursor" type="boolean" indexed="true" stored="false" required="false" multiValued="false"/>
    <field name="d3structure" type="boolean" indexed="true" stored="false" required="false" multiValued="false"/>
    <field name="proteins_with" type="string" indexed="true" stored="false" required="false" multiValued="true"/>

    <!-- Uniprot Entry Fields optional-->
    <field name="sec_acc" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="accession" type="basic_ci" indexed="true" stored="true" required="true" multiValued="true"/>
    <copyField source="sec_acc" dest="accession"/>
    <copyField source="accession_id" dest="accession"/>

    <!-- go used the solr default search, it does not have (partOf,parent) information-->
    <field name="default_go" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <!-- go used the advanced with everything-->
	<field name="go" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
	<field name="go_id" type="string" indexed="true" stored="false" required="false" multiValued="true"/>
	
	<dynamicField name="go_*" type="lowercase" indexed="true" required="false" stored="false" multiValued="true"/>

    <field name="keyword" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    
    <field name="ec" type="ec" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ec_exact" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    
     <field name="pathway" type="ec" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="organelle" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <!-- Gene -->
    <field name="gene" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="gene_exact" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="gene_sort" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true"/>

    <!-- Default field -->
    <field name="content" type="full_ci" indexed="true" stored="false" required="false" multiValued="true" omitNorms="false"/>

    <!-- Field to aid default search -->
    <field name="protgene_default" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <copyField source="gene" dest="protgene_default"/>
    <copyField source="name" dest="protgene_default"/>

    <!-- Taxonomy -->
    <field name="organism_sort" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true"/>
    <field name="organism_name" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="organism_id" type="int" indexed="true" stored="false" required="false" multiValued="false"/>
    <field name="taxonomy_name" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="taxonomy_id" type="int" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="host_name" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="host_id" type="int" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="popular_organism" type="string" indexed="true" stored="false" required="false" multiValued="false" />
    <field name="other_organism" type="string" indexed="true" stored="false" required="false" multiValued="false" />

    <!-- Comments -->
    <dynamicField name="cc_*" type="full_ci" indexed="true" required="false" stored="false" multiValued="true"/>
    <dynamicField name="ccev_*" type="lowercase" indexed="true" required="false" stored="false" multiValued="true"/>

    <field name="cc_scl_term" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_scl_note" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="ccev_scl_term" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_scl_note" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="cc_ap" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_ap_apu" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_ap_as" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_ap_ai" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_ap_rf" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="ccev_ap" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_ap_apu" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_ap_as" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_ap_ai" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_ap_rf" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="cc_bpcp" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_bpcp_absorption" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_bpcp_kinetics" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_bpcp_ph_dependence" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_bpcp_redox_potential" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_bpcp_temp_dependence" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="ccev_bpcp" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_bpcp_absorption" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_bpcp_kinetics" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_bpcp_ph_dependence" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_bpcp_redox_potential" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_bpcp_temp_dependence" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="cc_cofactor_chebi" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_cofactor_note" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_cofactor_chebi_ev" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_cofactor_note_ev" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
  
    <field name="cc_sc" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_sc_framesh" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_sc_einit" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_sc_eterm" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_sc_epred" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_sc_etran" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="cc_sc_misc" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="ccev_sc" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="ccev_sc_misc" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="interactor" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="family" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <!-- Cross-references -->
    <field name="xref" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="database" type="lowercase" indexed="true" stored="false" required="false"  multiValued="true"/>
    <dynamicField name="xref_count_*" type="int" indexed="true" required="false" stored="false" multiValued="false"/>

    <!-- Citations -->
    <field name="lit_author" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="lit_organisation" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="lit_title" type="full_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="lit_pubdate" type="date" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="lit_pubmed" type="string" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="lit_journal" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>

    <field name="tissue" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="strain" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="plasmid" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="transposon" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="scope" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="proteomecomponent" type="basic_ci" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="proteome" type="lowercase" indexed="true" stored="false" required="false" multiValued="true"/>
	
	
    <!-- Feature types-->
    <dynamicField name="ft_*" type="full_ci" indexed="true" required="false" stored="false" multiValued="true"/>
    <dynamicField name="ftev_*" type="lowercase" indexed="true" required="false" stored="false" multiValued="true"/>
    <dynamicField name="ftlen_*" type="int" indexed="true" required="false" stored="false" multiValued="true"/>
    <copyField source="ft_site" dest="ft_sites"/>
    <copyField source="ft_metal" dest="ft_sites"/>
    <copyField source="ft_act_site" dest="ft_sites"/>
    <copyField source="ft_binding" dest="ft_sites"/>

    <copyField source="ftev_site" dest="ftev_sites"/>
    <copyField source="ftev_metal" dest="ftev_sites"/>
    <copyField source="ftev_site" dest="ftev_sites"/>
    <copyField source="ftev_binding" dest="ftev_sites"/>

    <copyField source="ftlen_site" dest="ftlen_sites"/>
    <copyField source="ftlen_metal" dest="ftlen_sites"/>
    <copyField source="ftlen_site" dest="ftlen_sites"/>
    <copyField source="ftlen_binding" dest="ftlen_sites"/>


    <copyField source="ft_chain" dest="ft_molecule_processing"/>
    <copyField source="ft_init_met" dest="ft_molecule_processing"/>
    <copyField source="ft_peptide" dest="ft_molecule_processing"/>
    <copyField source="ft_signal" dest="ft_molecule_processing"/>
    <copyField source="ft_propep" dest="ft_molecule_processing"/>
    <copyField source="ft_transit" dest="ft_molecule_processing"/>

     <copyField source="ftev_chain" dest="ftev_molecule_processing"/>
     <copyField source="ftev_init_met" dest="ftev_molecule_processing"/>
     <copyField source="ftev_peptide" dest="ftev_molecule_processing"/>
     <copyField source="ftev_signal" dest="ftev_molecule_processing"/>
     <copyField source="ftev_chain" dest="ftev_molecule_processing"/>
     <copyField source="ftev_propep" dest="ftev_molecule_processing"/>

     <copyField source="ftlen_chain" dest="ftlen_molecule_processing"/>
     <copyField source="ftlen_init_met" dest="ftlen_molecule_processing"/>
     <copyField source="ftlen_peptide" dest="ftlen_molecule_processing"/>
     <copyField source="ftlen_signal" dest="ftlen_molecule_processing"/>
     <copyField source="ftlen_chain" dest="ftlen_molecule_processing"/>
     <copyField source="ftlen_propep" dest="ftlen_molecule_processing"/>

     <copyField source="ft_variant" dest="ft_variants"/>
     <copyField source="ft_var_seq" dest="ft_variants"/>

     <copyField source="ftev_variant" dest="ftev_variants"/>
     <copyField source="ftev_var_seq" dest="ftev_variants"/>

     <copyField source="ftlen_variant" dest="ftlen_variants"/>
     <copyField source="ftlen_var_seq" dest="ftlen_variants"/>


     <copyField source="ft_variant" dest="ft_positional"/>
     <copyField source="ft_var_seq" dest="ft_positional"/>
     <copyField source="ft_non_std" dest="ft_positional"/>
     <copyField source="ft_non_ter" dest="ft_positional"/>
     <copyField source="ft_non_cons" dest="ft_positional"/>
     <copyField source="ft_conflict" dest="ft_positional"/>
     <copyField source="ft_unsure" dest="ft_positional"/>


     <copyField source="ftev_variant" dest="ftev_positional"/>
     <copyField source="ftev_var_seq" dest="ftev_positional"/>
     <copyField source="ftev_non_std" dest="ftev_positional"/>
     <copyField source="ftev_non_ter" dest="ftev_positional"/>
     <copyField source="ftev_non_cons" dest="ftev_positional"/>
     <copyField source="ftev_conflict" dest="ftev_positional"/>
     <copyField source="ftev_unsure" dest="ftev_positional"/>

     <copyField source="ftlen_variant" dest="ftlen_positional"/>
     <copyField source="ftlen_var_seq" dest="ftlen_positional"/>
     <copyField source="ftlen_non_std" dest="ftlen_positional"/>
     <copyField source="ftlen_non_ter" dest="ftlen_positional"/>
     <copyField source="ftlen_non_cons" dest="ftlen_positional"/>
     <copyField source="ftlen_conflict" dest="ftlen_positional"/>
     <copyField source="ftlen_unsure" dest="ftlen_positional"/>

     <copyField source="ft_helix" dest="ft_secstruct"/>
     <copyField source="ft_turn" dest="ft_secstruct"/>
     <copyField source="ft_strand" dest="ft_secstruct"/>

     <copyField source="ftev_helix" dest="ftev_secstruct"/>
     <copyField source="ftev_turn" dest="ftev_secstruct"/>
     <copyField source="ftev_strand" dest="ftev_secstruct"/>

     <copyField source="ftlen_helix" dest="ftlen_secstruct"/>
     <copyField source="ftlen_turn" dest="ftlen_secstruct"/>
     <copyField source="ftlen_strand" dest="ftlen_secstruct"/>

     <copyField source="go_exp" dest="go_manual"/>
     <copyField source="go_iba" dest="go_manual"/>
     <copyField source="go_ic" dest="go_manual"/>
     <copyField source="go_ida" dest="go_manual"/>
     <copyField source="go_iep" dest="go_manual"/>
     <copyField source="go_igc" dest="go_manual"/>
     <copyField source="go_igi" dest="go_manual"/>
     <copyField source="go_imp" dest="go_manual"/>
     <copyField source="go_ipi" dest="go_manual"/>
     <copyField source="go_isa" dest="go_manual"/>
     <copyField source="go_ism" dest="go_manual"/>
     <copyField source="go_iso" dest="go_manual"/>
     <copyField source="go_iss" dest="go_manual"/>
     <copyField source="go_nas" dest="go_manual"/>
     <copyField source="go_tas" dest="go_manual"/>
     <copyField source="go_hda" dest="go_manual"/>
     <copyField source="go_hmp" dest="go_manual"/>
     <copyField source="go_hgi" dest="go_manual"/>
     <copyField source="go_hep" dest="go_manual"/>
     <copyField source="go_htp" dest="go_manual"/>
     <copyField source="go_iea" dest="go_automatic"/>

     <!-- Protein Existence -->
     <field name="existence" type="basic_ci" indexed="true" stored="false" required="false" multiValued="false"/>


     <!--  Sequence  -->
     <field name="mass" type="int" indexed="true" stored="false" required="false" multiValued="false"/>
     <field name="length" type="int" indexed="true" stored="false" required="false" multiValued="false"/>
     <field name="sq" type="sequence_ci" indexed="true" stored="false" required="true" multiValued="false"/>
     
     <field name="annotation_score" type="int" indexed="true" stored="true" required="false" multiValued="false" docValues="true"/>

    <!-- UniRef clusters -->
    <field name="uniref_cluster_50" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true"/>
    <field name="uniref_cluster_90" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true" />
    <field name="uniref_cluster_100" type="string" indexed="true" stored="false" required="false" multiValued="false" docValues="true"/>

    <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>
     <!-- catchall text field that indexes tokens both normally and in reverse for efficient
         leading wildcard queries. -->
     <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>

    <!-- Start of UJDK type definitions -->
    <!-- Takes a peptide sequence tokenises it after every amino acid, and lowercases each token. Therefore, for
         AAAA we end up with four tokens, a, a, a, a. This is done for both index and query time. We do not need to stort
         norms because we aren't interested in how much of the field was matched. Requests over this field must be
         specified with a phrase query, e.g., "AAA", meaning, 'give me all hits where A is repeated 3 times. -->
    <fieldType name="sequence_ci" class="solr.TextField" sortMissingLast="true" omitNorms="false">
        <analyzer type="index">
            <tokenizer class="solr.PatternTokenizerFactory" pattern="(?&lt;=.)(?!$)"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PatternTokenizerFactory" pattern="(?&lt;=.)(?!$)"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- standard analysis for text fields -->
    <!--
    ## Currently, the combination of multiple *Graph* analysers does not work; we needed this for
    ## word filtering followed by synonym filtering.
          - http://lucene.472066.n3.nabble.com/SynonymGraphFilterFactory-with-WordDelimiterGraphFilterFactory-usage-td4373974.html

    ## We raised an issue on StackOverflow, but that didn't help.
          - https://stackoverflow.com/questions/51208018/solr-phrase-query-issue-for-worddelimitergraphfilterfactory

    ## THEREFORE:
       We use deprecated factories for white space and synonym filtering.

    ## UPDATE:
       Found that solr result streaming does not work with deprecated
       filter factories. Therefore, we now have removed synonyms handling,
       and use of deprecated filters.
    -->
    <fieldType name="full_ci" class="solr.TextField" sortMissingLast="true" omitNorms="true" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory" preserveOriginal="false"/>
            <filter class="solr.WordDelimiterGraphFilterFactory"
                    generateWordParts="1"
                    generateNumberParts="1"
                    catenateWords="1"
                    catenateNumbers="0"
                    catenateAll="1"
                    splitOnCaseChange="1"
                    preserveOriginal="0"
                    splitOnNumerics="0"
                    stemEnglishPossessive="1"
            />
            <filter class="solr.FlattenGraphFilterFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory" preserveOriginal="false"/>
            <filter class="solr.WordDelimiterGraphFilterFactory"
                    generateWordParts="1"
                    generateNumberParts="1"
                    catenateWords="1"
                    catenateNumbers="0"
                    catenateAll="1"
                    splitOnCaseChange="1"
                    preserveOriginal="0"
                    splitOnNumerics="0"
                    stemEnglishPossessive="1"
            />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- basic analysis for fields that require no splitting -->
    <fieldType name="basic_ci" class="solr.TextField" sortMissingLast="true" omitNorms="true" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- EC fields have special handling, e.g., this field allows search "1.1" to match "1.1*"
         without explicit need for wildcard. -->
    <fieldType name="ec" class="solr.TextField" sortMissingLast="true" omitNorms="true">
        <analyzer type="index">
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="-" replacement=""/>
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="((\.)(?!([0-9]|n)+))+" replacement=""/>
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="."/>
            <!--<filter class="solr.PatternReplaceFilterFactory" pattern="((\.)(?!([0-9]|n)+))+"/>-->
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="-" replacement=""/>
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="((\.)(?!([0-9]|n)+))+" replacement=""/>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <!--<filter class="solr.PatternReplaceFilterFactory" pattern="((\.)(?!([0-9]|n)+))+"/>-->
        </analyzer>
    </fieldType>
    <!-- End of UJDK type definitions -->

    <fieldType name="suggester_ci" class="solr.TextField"
               sortMissingLast="true" omitNorms="true" positionIncrementGap="100">
        <!-- defined for index and query time -->
        <analyzer type="index">
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(/|-)" replacement=" "/>
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(')" replacement=""/>
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="^([A-Za-z0-9_]+)\.([0-9]+)$"
                        replacement="$1.$2 $1"/>
            <tokenizer class="solr.ClassicTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.StopFilterFactory" words="stopwords.txt" ignoreCase="true"/>
            <filter class="solr.PorterStemFilterFactory"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            <filter class="solr.FlattenGraphFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(/|-)" replacement=" "/>
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(')" replacement=""/>
            <tokenizer class="solr.ClassicTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SynonymGraphFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.StopFilterFactory" words="stopwords.txt" ignoreCase="true"/>
            <filter class="solr.PorterStemFilterFactory"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>
</schema>